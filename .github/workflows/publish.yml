# Auto-increment version, publish to GitHub Packages and create GitHub Release
name: Auto Version, Publish to GitHub Packages and Release

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  version-and-publish:
    # Only run on push to main or when PR is merged
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: write
      packages: write

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0'
          registry-url: 'https://npm.pkg.github.com'
          scope: '@${{ github.repository_owner }}'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Install dependencies
        run: npm ci

      # Determine version bump type based on commit
      - name: Determine version bump
        id: version_bump
        run: |
          # Get the latest commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major:"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feature:"* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      # Get previous version for changelog
      - name: Get previous version
        id: prev_version
        run: |
          PREV_VERSION=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "PREV_VERSION=$PREV_VERSION" >> $GITHUB_ENV
          echo "Previous version: $PREV_VERSION"

      # Increment version
      - name: Bump version
        run: |
          npm version ${{ steps.version_bump.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV

      # Configure package.json for GitHub Packages
      - name: Configure package for GitHub Packages
        run: |
          # Get current package name
          CURRENT_NAME=$(node -p "require('./package.json').name")

          # If it doesn't have a scope, add it
          if [[ $CURRENT_NAME != @* ]]; then
            SCOPED_NAME="@${{ github.repository_owner }}/$CURRENT_NAME"
          else
            SCOPED_NAME="$CURRENT_NAME"
          fi

          # Update package.json with GitHub Packages configuration
          node -e "
            const fs = require('fs');
            const pkg = require('./package.json');
            pkg.name = '$SCOPED_NAME';
            pkg.repository = pkg.repository || 'https://github.com/${{ github.repository }}';
            pkg.publishConfig = {
              '@${{ github.repository_owner }}:registry': 'https://npm.pkg.github.com'
            };
            fs.writeFileSync('./package.json', JSON.stringify(pkg, null, 2));
          "
      # execute tests if they exist
      - name: Run tests
        run: npm run test || echo "No tests found, skipping..."

      # Build the project
      - name: Build project
        run: npm run build:tsup

      # Generate release notes automatically
      - name: Generate release notes
        id: release_notes
        run: |
          echo "RELEASE_NOTES<<EOF" >> $GITHUB_ENV
          echo "## üöÄ What's Changed" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV

          # Get commits since the last version
          if [ "${{ env.PREV_VERSION }}" != "v0.0.0" ]; then
            git log ${{ env.PREV_VERSION }}..HEAD --pretty=format:"- %s" --reverse >> $GITHUB_ENV
          else
            git log --pretty=format:"- %s" --reverse >> $GITHUB_ENV
          fi

          echo "" >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "## üì¶ Installation from GitHub Packages" >> $GITHUB_ENV
          echo '```bash' >> $GITHUB_ENV
          echo "npm install $(node -p "require('./package.json').name")@${{ env.NEW_VERSION }}" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "" >> $GITHUB_ENV
          echo "### üîß Configure .npmrc for GitHub Packages" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com" >> $GITHUB_ENV
          echo '```' >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # Commit and push the new version
      - name: Commit version bump
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }} [skip ci]"
          git tag "v${{ env.NEW_VERSION }}"
          git push origin main
          git push origin "v${{ env.NEW_VERSION }}"

      # Publish to GitHub Packages
      - name: Publish to GitHub Packages
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.GH_TOKEN }}

      # Publicar en NPM
      - name: Publish to NPM
        run: npm publish
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}

      # Create GitHub Release with attached files
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.NEW_VERSION }}
          name: Release v${{ env.NEW_VERSION }}
          body: ${{ env.RELEASE_NOTES }}
          draft: false
          prerelease: false
          generate_release_notes: true # Generates additional notes automatically
          files: |
            dist/*.js
            dist/*.d.ts
            package.json
            README.md
        env:
          GITHUB_TOKEN: ${{ secrets.GH_TOKEN }}

      # Success notification with links
      - name: Success notification
        run: |
          echo "‚úÖ Release created successfully!"
          echo "üì¶ GitHub Packages: https://github.com/${{ github.repository }}/packages"
          echo "üè∑Ô∏è Release: https://github.com/${{ github.repository }}/releases/tag/v${{ env.NEW_VERSION }}"
          echo "üîñ Version: v${{ env.NEW_VERSION }}"
          echo ""
          echo "üìã To install this package:"
          echo "npm install $(node -p "require('./package.json').name")@${{ env.NEW_VERSION }}"
          echo ""
          echo "üîß Configure .npmrc:"
          echo "@${{ github.repository_owner }}:registry=https://npm.pkg.github.com"
