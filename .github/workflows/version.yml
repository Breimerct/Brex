# Auto-increment version and create tag
name: Version Management

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]
    types: [closed]

jobs:
  version:
    # Solo ejecutar en push a main o cuando se hace merge de PR
    if: github.ref == 'refs/heads/main' && (github.event_name == 'push' || github.event.pull_request.merged == true)
    runs-on: ubuntu-latest

    permissions:
      contents: write

    outputs:
      new_version: ${{ env.NEW_VERSION }}
      version_bumped: ${{ steps.check_changes.outputs.version_changed }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GH_TOKEN }}
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.15.0'
          cache: 'npm'

      - name: Configure Git
        run: |
          git config --local user.email ${{ secrets.GH_EMAIL }}
          git config --local user.name "Breimerct"

      - name: Install dependencies
        run: npm ci

      # Determinar tipo de version bump basado en el commit
      - name: Determine version bump
        id: version_bump
        run: |
          # Obtener el √∫ltimo commit message
          COMMIT_MSG=$(git log -1 --pretty=%B)

          # Skip si el commit es de version bump
          if [[ $COMMIT_MSG == *"[skip ci]"* ]] || [[ $COMMIT_MSG == *"chore: bump version"* ]]; then
            echo "bump=skip" >> $GITHUB_OUTPUT
            exit 0
          fi

          if [[ $COMMIT_MSG == *"BREAKING CHANGE"* ]] || [[ $COMMIT_MSG == *"major:"* ]]; then
            echo "bump=major" >> $GITHUB_OUTPUT
          elif [[ $COMMIT_MSG == *"feat:"* ]] || [[ $COMMIT_MSG == *"feature:"* ]]; then
            echo "bump=minor" >> $GITHUB_OUTPUT
          else
            echo "bump=patch" >> $GITHUB_OUTPUT
          fi

      # Incrementar versi√≥n
      - name: Bump version
        if: steps.version_bump.outputs.bump != 'skip'
        run: |
          CURRENT_VERSION=$(node -p "require('./package.json').version")
          npm version ${{ steps.version_bump.outputs.bump }} --no-git-tag-version
          NEW_VERSION=$(node -p "require('./package.json').version")
          echo "NEW_VERSION=$NEW_VERSION" >> $GITHUB_ENV
          echo "Version bumped from $CURRENT_VERSION to $NEW_VERSION"

      - name: Check if version changed
        id: check_changes
        run: |
          if [ "${{ steps.version_bump.outputs.bump }}" == "skip" ]; then
            echo "version_changed=false" >> $GITHUB_OUTPUT
          else
            echo "version_changed=true" >> $GITHUB_OUTPUT
          fi

      # Commit y push de la nueva versi√≥n
      - name: Commit version bump
        if: steps.check_changes.outputs.version_changed == 'true'
        run: |
          git add package.json package-lock.json
          git commit -m "chore: bump version to v${{ env.NEW_VERSION }} [skip ci]"
          git tag "v${{ env.NEW_VERSION }}"
          git push origin main
          git push origin "v${{ env.NEW_VERSION }}"

      - name: Output results
        run: |
          if [ "${{ steps.check_changes.outputs.version_changed }}" == "true" ]; then
            echo "‚úÖ Version bumped to v${{ env.NEW_VERSION }}"
            echo "üè∑Ô∏è Tag created: v${{ env.NEW_VERSION }}"
          else
            echo "‚è≠Ô∏è Version bump skipped"
          fi
